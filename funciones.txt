#include <iostream>
using namespace std;

const int TAMANO_MATRIZ = 8;

// Función para imprimir la matriz de LEDs
void imprimirMatriz(int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ]) {
    for (int i = 0; i < TAMANO_MATRIZ; i++) {
        for (int j = 0; j < TAMANO_MATRIZ; j++) {
            cout << matriz[i][j] << " ";  // Imprimir el valor (0 o 1)
        }
        cout << endl;
    }
    cout << endl;
}

// Función para generar y mostrar la matriz
void generarYMostrarMatriz() {
    int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ] = {0};  // Inicializar la matriz con todos los LEDs apagados

    cout << "Matriz generada:" << endl;
    imprimirMatriz(matriz);
}

// Función para realizar la verificación de los LEDs, parte de publik 
void verificacion_publik(int repeticiones, int duracion_segundos) {
    int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ] = {0};  // Inicializar la matriz con todos los LEDs apagados

    cout << "Iniciando verificación de LEDs..." << endl;

    for (int r = 0; r < repeticiones; r++) {
        // Encender todos los LEDs
        for (int i = 0; i < TAMANO_MATRIZ; i++) {
            for (int j = 0; j < TAMANO_MATRIZ; j++) {
                matriz[i][j] = 1;  // 1 representa encendido
            }
        }

        // Imprimir la matriz
        imprimirMatriz(matriz);

        // Esperar la duración especificada en segundos
        for (int i = 0; i < duracion_segundos; i++) {
        }

        // Apagar todos los LEDs
        for (int i = 0; i < TAMANO_MATRIZ; i++) {
            for (int j = 0; j < TAMANO_MATRIZ; j++) {
                matriz[i][j] = 0;  // 0 representa apagado
            }
        }

        // Imprimir la matriz
        imprimirMatriz(matriz);

        // Esperar la duración especificada en segundos
        for (int i = 0; i < duracion_segundos; i++) {
            // Puedes agregar alguna lógica adicional si lo deseas
        }
    }

    cout << "Verificación completa." << endl;
}

// Función para permitir al usuario ingresar un patrón personalizado en la matriz de LEDs por filas
void imagen(int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ]) {
    cout << "Ingrese el patrón en la matriz de LEDs (0 para apagado, 1 para encendido) por filas." << endl;

    for (int i = 0; i < TAMANO_MATRIZ; i++) {
        cout << "Fila " << i + 1 << ": ";
        for (int j = 0; j < TAMANO_MATRIZ; j++) {
            if (!(cin >> matriz[i][j])) {
                matriz[i][j] = 0; // Si no se ingresan más números, asumir 0
            }
        }
    }

    cout << "Patrón ingresado:" << endl;
    imprimirMatriz(matriz);
}

int main() {
    int opcion;
    int repeticiones;
    int duracion_segundos;
    int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ] = {0};  // Inicializar la matriz con todos los LEDs apagados

    do {
        cout << "Menú:" << endl;
        cout << "1. Generar matriz e imprimir matriz" << endl;
        cout << "2. Realizar verificación de LEDs" << endl;
        cout << "3. Ingresar un patrón personalizado en la matriz" << endl;
        cout << "4. Salir" << endl;
        cout << "Ingrese su opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                generarYMostrarMatriz();
                break;
            case 2:
                cout << "Ingrese el número de repeticiones para la verificación: ";
                cin >> repeticiones;
                cout << "Ingrese la duración en segundos para cada encendido y apagado de LEDs: ";
                cin >> duracion_segundos;
                verificacion_publik(repeticiones, duracion_segundos);
                break;
            case 3:
                imagen(matriz);
                break;
            case 4:
                cout << "Saliendo del programa." << endl;
                break;
            default:
                cout << "Opción no válida. Por favor, ingrese una opción válida." << endl;
                break;#include <iostream>
using namespace std;

const int TAMANO_MATRIZ = 8;

// Función para imprimir la matriz de LEDs
void imprimirMatriz(int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ]) {
    for (int i = 0; i < TAMANO_MATRIZ; i++) {
        for (int j = 0; j < TAMANO_MATRIZ; j++) {
            cout << matriz[i][j] << " ";  // Imprimir el valor (0 o 1)
        }
        cout << endl;
    }
    cout << endl;
}

// Función para generar y mostrar la matriz
void generar_matriz() {
    int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ] = {0};  // Inicializar la matriz con todos los LEDs apagados

    cout << "Matriz generada:" << endl;
    imprimirMatriz(matriz);
}

// Función para realizar la verificación de los LEDs, parte de publik 
void verificacion(int repeticiones, int duracion_segundos) {
    int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ] = {0};  // Inicializar la matriz con todos los LEDs apagados

    cout << "Iniciando verificación de LEDs..." << endl;

    for (int r = 0; r < repeticiones; r++) {
        // Encender todos los LEDs
        for (int i = 0; i < TAMANO_MATRIZ; i++) {
            for (int j = 0; j < TAMANO_MATRIZ; j++) {
                matriz[i][j] = 1;  // 1 representa encendido
            }
        }

        // Imprimir la matriz
        imprimirMatriz(matriz);

        // Esperar la duración especificada en segundos
        for (int i = 0; i < duracion_segundos; i++) {
        }

        // Apagar todos los LEDs
        for (int i = 0; i < TAMANO_MATRIZ; i++) {
            for (int j = 0; j < TAMANO_MATRIZ; j++) {
                matriz[i][j] = 0;  // 0 representa apagado
            }
        }

        // Imprimir la matriz
        imprimirMatriz(matriz);

        // Esperar la duración especificada en segundos
        for (int i = 0; i < duracion_segundos; i++) {
            // Puedes agregar alguna lógica adicional si lo deseas
        }
    }

    cout << "Verificación completa." << endl;
}

// Función para permitir al usuario ingresar un patrón personalizado en la matriz de LEDs por filas
void imagen(int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ]) {
    cout << "Ingrese el patrón en la matriz de LEDs (0 para apagado, 1 para encendido) por filas." << endl;

    for (int i = 0; i < TAMANO_MATRIZ; i++) {
        cout << "Fila " << i + 1 << ": ";
        for (int j = 0; j < TAMANO_MATRIZ; j++) {
            if (!(cin >> matriz[i][j])) {
                matriz[i][j] = 0; // Si no se ingresan más números, asumir 0
            }
        }
    }

    cout << "Patrón ingresado:" << endl;
    imprimirMatriz(matriz);
}

int main() {
    int opcion;
    int repeticiones;
    int duracion_segundos;
    int matriz[TAMANO_MATRIZ][TAMANO_MATRIZ] = {0};  // Inicializar la matriz con todos los LEDs apagados

    do {
        cout << "Menú:" << endl;
        cout << "1. Generar matriz e imprimir matriz" << endl;
        cout << "2. Realizar verificación de LEDs" << endl;
        cout << "3. Ingresar un patrón personalizado en la matriz" << endl;
        cout << "4. Salir" << endl;
        cout << "Ingrese su opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1:
                generar_matriz();
                break;
            case 2:
                cout << "Ingrese el número de repeticiones para la verificación: ";
                cin >> repeticiones;
                cout << "Ingrese la duración en segundos para cada encendido y apagado de LEDs: ";
                cin >> duracion_segundos;
                verificacion(repeticiones, duracion_segundos);
                break;
            case 3:
                imagen(matriz);
                break;
            case 4:
                cout << "Saliendo del programa." << endl;
                break;
            default:
                cout << "Opción no válida. Por favor, ingrese una opción válida." << endl;
                break;
        }

    } while (opcion != 4);

    return 0;
}
        }

    } while (opcion != 4);

    return 0;
}

